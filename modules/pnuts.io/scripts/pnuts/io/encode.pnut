package("pnuts.io")

import("sun.misc.UUEncoder")
import("sun.misc.UUDecoder")
import("org.pnuts.io.Base64Encoder")
import("org.pnuts.io.Base64Decoder")
import("java.io.InputStream")

function uuencode(in, out, name)  UUEncoder(name).encodeBuffer(in, out)
function uuencode(in, out)  UUEncoder().encodeBuffer(in, out)
function uuencode(in)  pipe(uuencode, in)
function uudecode(in, out)  UUDecoder().decodeBuffer(in, out)
function uudecode(in)   pipe(uudecode, in)

function base64encode(in, out){
  if (in instanceof InputStream){
    Base64Encoder().encode(in, out)
  } else if (isArray(in)){
    Base64Encoder().encode(in)
  } else if (in instanceof String){
    Base64Encoder().encode(in)
  } else {
    fd = open(in)
    try {
      Base64Encoder().encode(fd, out)
    } finally {
      fd.close()
    }
  }
}

function base64encode(in) {
  if (in instanceof InputStream){
    pipe(base64encode, in)
  } else if (isArray(in)){
    Base64Encoder().encode(in)
  } else if (in instanceof String){
    Base64Encoder().encode(in.getBytes())
  } else {
    pipe(base64encode, open(in))
  }
}

function base64decode(in, out){
  if (in instanceof InputStream){
    Base64Decoder().decode(in, out)
  } else if (in instanceof byte[]){
    Base64Decoder().decode(in)
  } else if (in instanceof String){
    Base64Decoder().decode(in)
  } else {
    fd = open(in)
    try {
      Base64Decoder().decode(fd, out)
    } finally {
      fd.close()
    }
  }
}

function base64decode(in){
  if (in instanceof InputStream){
    pipe(base64decode, in)
  } else if (in instanceof byte[]){
    Base64Decoder().decode(in)
  } else if (in instanceof String){
    Base64Decoder().decode(in)
  } else {
    pipe(base64decode, open(in))
  }
}

function unicodeToString(escaped){
   len = escaped.length()
   buf = StringBuffer()

   for (x = 0; x < len; ) {
      c = escaped.charAt(x++)
      if (c == '\\') {
        c = escaped.charAt(x++)
        if (c == 'u') {
           value = 0
	   for (i = 0; i < 4; i++) {
	     c = escaped.charAt(x++)
	     switch (c) {
	       case '0': case '1': case '2': case '3': case '4':
	       case '5': case '6': case '7': case '8': case '9':
	         value = (value << 4) + c - '0'
		 break;
	       case 'a': case 'b': case 'c':
               case 'd': case 'e': case 'f':
		 value = (value << 4) + 10 + c - 'a'
		 break
	       case 'A': case 'B': case 'C':
               case 'D': case 'E': case 'F':
		 value = (value << 4) + 10 + c - 'A'
		 break
	       default:
                 ERROR("malformed.unicode.encoding")
             }
           }
           buf.append((char)value);
         } else {
           if (c == 't'){
	      c = '\t';
           } else if (c == 'r'){
	      c = '\r';
           } else if (c == 'n'){
	      c = '\n';
           } else if (c == 'f'){
	      c = '\f';
           }
           buf.append(c)
        }
     } else {
        buf.append(c);
     }
  }
  buf.toString()
}

function stringToUnicode(str){
   hexDigit = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']
   function toHex(nibble) hexDigit[(nibble & 0xF)]

   len = str.length()
   buf = StringBuffer(len)
   for (i = 0; i < len; i++){
     c = str.charAt(i)
     switch(c) {
     case '\\': buf.append('\\'); buf.append('\\'); continue
     case '\t': buf.append('\\'); buf.append('t'); continue
     case '\n': buf.append('\\'); buf.append('n'); continue
     case '\r': buf.append('\\'); buf.append('r'); continue
     case '\f': buf.append('\\'); buf.append('f'); continue
     default:
       if ((c < 20) || (c > 127)) {
          buf.append("\\u")
          buf.append(toHex((c >> 12) & 0xF))
          buf.append(toHex((c >> 8) & 0xF))
          buf.append(toHex((c >> 4) & 0xF))
          buf.append(toHex((c >> 0) & 0xF))
       } else {
          buf.append(c)
       }
     }
   }
   buf.toString()
}
