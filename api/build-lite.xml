<?xml version="1.0" encoding="UTF-8"?>
<project name="Pnuts" default="main" basedir=".">

  <!-- See "build.properties.default"   -->
  <!-- You may need to set ${javacc.home}  -->
  <property file="build.properties.lite"/>
  <property file="../build.properties"/>
  <property file="build.properties"/>
  <property file="build.properties.default"/>

  <!-- Project Properties -->
  <property name="jar.file" value="pnuts-lite.jar"/>
  <property name="build.classdir" value="classes.lite"/>
  <property name="generated.dir.1" value="generated"/>
  <property name="generated.dir.2" value="generated/pass2"/>
  <property name="generated.common" value="generated.common"/>
  <property name="src.dir" value="src"/>
  <property name="src.dir.lite" value="src.lite"/>
  <property name="scripts.dir" value="scripts"/>
  <property name="classes.txt" value="pnuts-lite.list"/>

  <target name="main" depends="jarfile"/>

  <target name="build.dirs">
    <mkdir dir="${build.classdir}"/>
    <mkdir dir="${generated.dir.1}/pnuts/lang"/>
    <mkdir dir="${generated.dir.2}/pnuts/lang"/>
    <delete dir="${generated.common}"/>
    <mkdir dir="${generated.common}"/>
  </target>

  <target name="jarfile" depends="compile">
     <tstamp>
       <format property="build.number" pattern="yyyyMMddHHmmss" locale="en"/>
     </tstamp>
     <jar jarfile="${jar.file}">
       <manifest>
         <attribute name="Main-Class" value="pnuts.tools.Main"/>
         <attribute name="Specification-Title" value="${specification.title}"/>
         <attribute name="Specification-Version" value="${specification.version}"/>
         <attribute name="Specification-Vendor" value="${specification.vendor}"/>
         <attribute name="Implementation-Title" value="${implementation.title}"/>
         <attribute name="Implementation-Version" value="${build.number}"/>
         <attribute name="Implementation-Vendor" value="${implementation.vendor}"/>
       </manifest>
       <fileset dir="${build.classdir}">
        <exclude name="pnuts/compiler/Opcode.class"/>
       </fileset>
       <fileset dir="${scripts.dir}">
        <include name="pnuts/lang/pnuts.properties"/>
       </fileset>
     </jar> 
  </target>

  <target name="grammar.check">
    <uptodate property="grammar.modified"
              srcfile="${src.dir}/pnuts/lang/Pnuts.jjt"
              targetfile="${generated.dir.2}/pnuts/lang/PnutsParser.java" />
  </target>

  <target name="prepare">
    <copy todir="${generated.common}" overwrite="true">
      <fileset dir="${src.dir}"/>
    </copy>
    <copy todir="${generated.common}" overwrite="true">
      <fileset dir="${src.dir.lite}"/>
    </copy>
  </target>

  <target name="compile" depends="parser,prepare">
    <javac destdir="${build.classdir}"
           classpath="${build.classdir}"
           sourcepath="${src.dir.lite}:${src.dir}:${generated.dir.2}"
           target="${javac.target}"
           source="${javac.source}"
           debug="${javac.debug}"
           verbose="${javac.verbose}"
           deprecation="${javac.deprecation}"
           optimize="${javac.optimize}">
      <src path="${generated.common}"/>
      <includesfile name="${classes.txt}"/>
    </javac>
  </target>

  <target name="parser.setup" depends="build.dirs,grammar.check" unless="grammar.modified">
    <jjtree target="${src.dir}/pnuts/lang/Pnuts.jjt"
            outputdirectory="${generated.dir.1}/pnuts/lang"
	    javacchome="${javacc.home}" 
	    nodeusesparser="false" />
    <javacc target="${generated.dir.1}/pnuts/lang/Pnuts.jj"
            outputdirectory="${generated.dir.1}/pnuts/lang"
	    javacchome="${javacc.home}" />
  </target>

  <target name="parser" depends="parser.setup" unless="grammar.modified">
    <copy todir="${generated.dir.2}">
      <fileset dir="${generated.dir.1}">
        <present present="srconly" targetdir="${src.dir}"/>
        <exclude name="pnuts/lang/Node.java"/>
        <include name="pnuts/lang/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="install">
    <mkdir dir="${install.dir}/lib"/>
    <copy todir="${install.dir}/lib">
      <fileset file="${jar.file}"/>
    </copy>
  </target>

  <target name="clean">
    <delete dir="${build.classdir}"/>
    <delete dir="${generated.dir.2}"/>
    <delete dir="${generated.dir.1}"/>
    <delete dir="${generated.common}"/>
    <delete file="${jar.file}"/>
    <delete dir="${build.classdir}"/>
  </target>

</project>
