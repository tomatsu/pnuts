package pnuts.compiler;

import java.io.StringReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;
import pnuts.lang.Pnuts;
import pnuts.lang.ParseException;
import pnuts.lang.Context;
import pnuts.lang.Runtime;
import pnuts.lang.Visitor;
import pnuts.lang.Escape;

class CompiledScript extends Pnuts implements Compiled {

	static final long serialVersionUID = -6820627137085836944L;

	/**
	 * @serial
	 */
	private Pnuts script;

	transient Runtime rt;

	/**
	 * Constructor 

	 * @param rt code generated by the bytecode compiler
	 * @param script the parsed script
	 */
	public CompiledScript(Runtime rt, Pnuts script) {
		this.scriptSource = script.getScriptSource();
		if (script instanceof CompiledScript){
			CompiledScript compiled = (CompiledScript)script;
			this.rt = compiled.rt;
			this.script = compiled.script;
		} else {
			this.rt = rt;
			this.script = script;
		}
	}

	public Object accept(Visitor visitor, Context context) {
		if (visitor instanceof Compiler) {
			Compiler c = (Compiler) visitor;
			if (c.automatic) {
				return accept(context);
			} else {
				return this;
			}
		} else {
			throw new RuntimeException("unsupported operation for compiled code");
		}
	}

	public Object accept(Context context) {
		try {
			return rt.run(context);
		} catch (Escape esc){
			return esc.getValue();
		}
	}

	private void writeObject(ObjectOutputStream s)
			throws IOException {
		s.defaultWriteObject();
		s.writeObject(script);
	}

	private void readObject(ObjectInputStream s)
			throws IOException, ClassNotFoundException {
		s.defaultReadObject();
		this.script = (Pnuts)s.readObject();
		Context ctx = Runtime.getThreadContext();
		if (ctx == null){
			ctx = new Context();
		}
		CompiledScript compiled = (CompiledScript)new Compiler().compile(script, ctx);
		this.rt = compiled.rt;
	}
}
